meta {
  name: Add flashcard list
  type: http
  seq: 6
}

post {
  url: {{BASE_URL}}/v1/flashcards/learning_module/{{learning_module_id}}/bulk
  body: json
  auth: none
}

body:json {
  [
    {
      "question": "What are TypeScript generics?",
      "answer": "Generics allow you to create reusable components that work with any data type while maintaining type safety.",
      "example": "function identity<T>(arg: T): T { return arg; }",
      "learning_module_id": 2,
      "study_status": "UNSTUDIED"
    },
    {
      "question": "What is a mapped type in TypeScript?",
      "answer": "Mapped types allow you to transform the properties of an existing type to create a new type.",
      "example": "type ReadOnly<T> = { readonly [K in keyof T]: T[K] };",
      "learning_module_id": 2,
      "study_status": "UNSTUDIED"
    },
    {
      "question": "What is a utility type in TypeScript?",
      "answer": "Utility types are predefined generic types that help manipulate other types easily.",
      "example": "type Partial<T> = { [P in keyof T]?: T[P] };",
      "learning_module_id": 2,
      "study_status": "UNSTUDIED"
    },
    {
      "question": "How does TypeScript handle conditional types?",
      "answer": "Conditional types allow you to create types based on a condition, using the `extends` keyword.",
      "example": "type IsString<T> = T extends string ? true : false;",
      "learning_module_id": 2,
      "study_status": "UNSTUDIED"
    },
    {
      "question": "What are TypeScript decorators?",
      "answer": "Decorators are special declarations that attach metadata or modify behavior of classes, methods, or properties.",
      "example": "@Component({ selector: 'app-root' })",
      "learning_module_id": 2,
      "study_status": "UNSTUDIED"
    },
    {
      "question": "What is the 'keyof' operator in TypeScript?",
      "answer": "The 'keyof' operator returns a union type of all keys of an object type.",
      "example": "type Keys = keyof { name: string; age: number }; // 'name' | 'age'",
      "learning_module_id": 2,
      "study_status": "UNSTUDIED"
    },
    {
      "question": "How do intersection types work in TypeScript?",
      "answer": "Intersection types combine multiple types into one, requiring an object to satisfy all types.",
      "example": "type Person = { name: string } & { age: number };",
      "learning_module_id": 2,
      "study_status": "UNSTUDIED"
    },
    {
      "question": "What is the 'unknown' type in TypeScript?",
      "answer": "The 'unknown' type is a safer alternative to 'any', requiring type checks before usage.",
      "example": "let value: unknown; if (typeof value === 'string') { console.log(value.toUpperCase()); }",
      "learning_module_id": 2,
      "study_status": "UNSTUDIED"
    },
    {
      "question": "What is a discriminated union in TypeScript?",
      "answer": "A discriminated union is a pattern that uses a common property to differentiate between multiple types in a union.",
      "example": "type Shape = | { kind: 'circle', radius: number } | { kind: 'square', side: number };",
      "learning_module_id": 2,
      "study_status": "UNSTUDIED"
    }
  ]
}

vars:pre-request {
  learning_module_id: 2
}
